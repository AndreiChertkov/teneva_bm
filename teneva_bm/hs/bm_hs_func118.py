import numpy as np
from teneva_bm import Bm


class BmHsFunc118(Bm):
    def __init__(self, d=15, n=64, seed=42, name=None):
        super().__init__(d, n, seed, name)
        self.set_desc("""
            The function 118 from the Hock & Schittkowski collection.
            Continuous optimal control (OC) problem with constraints:
            .------------------------------.
            | F(x) -> min s.t. C(x) = True |
            .------------------------------.
            x - continuous control
                x[0] | >= 8 | <= 21
                x[1] | >= 43 | <= 57
                x[2] | >= 3 | <= 16
                x[3] | >= 0 | <= 90
                x[4] | >= 0 | <= 120
                x[5] | >= 0 | <= 60
                x[6] | >= 0 | <= 90
                x[7] | >= 0 | <= 120
                x[8] | >= 0 | <= 60
                x[9] | >= 0 | <= 90
                x[10] | >= 0 | <= 120
                x[11] | >= 0 | <= 60
                x[12] | >= 0 | <= 90
                x[13] | >= 0 | <= 120
                x[14] | >= 0 | <= 60
            F - objective function
                2.3 * x[0] + 0.0001 * x[0] ** 2 + 2.3 * x[3] + 0.0001 * x[3] ** 2 + 2.3 * x[6] + 0.0001 * x[6] ** 2 + 
                2.3 * x[9] + 0.0001 * x[9] ** 2 + 2.3 * x[12] + 0.0001 * x[12] ** 2 + 1.7 * x[1] + 0.0001 * x[1] ** 2 + 
                1.7 * x[4] + 0.0001 * x[4] ** 2 + 1.7 * x[7] + 0.0001 * x[7] ** 2 + 1.7 * x[10] + 0.0001 * x[10] ** 2 + 
                1.7 * x[13] + 0.0001 * x[13] ** 2 + 2.2 * x[2] + 0.00015 * x[2] ** 2 + 2.2 * x[5] + 0.00015 * x[5] ** 2 + 
                2.2 * x[8] + 0.00015 * x[8] ** 2 + 2.2 * x[11] + 0.00015 * x[11] ** 2 + 2.2 * x[14] + 0.00015 * x[14] ** 2
            C - constraint function
                7 + x[3] - x[0] >= 0
                6 - x[3] + x[0] >= 0
                7 + x[6] - x[3] >= 0
                6 - x[6] + x[3] >= 0
                7 + x[9] - x[6] >= 0
                6 - x[9] + x[6] >= 0
                7 + x[12] - x[9] >= 0
                6 - x[12] + x[9] >= 0
                7 + x[4] - x[1] >= 0
                7 - x[4] + x[1] >= 0
                7 + x[7] - x[4] >= 0
                7 - x[7] + x[4] >= 0
                7 + x[10] - x[7] >= 0
                7 - x[10] + x[7] >= 0
                7 + x[13] - x[10] >= 0
                7 - x[13] + x[10] >= 0
                7 + x[5] - x[2] >= 0
                6 - x[5] + x[2] >= 0
                7 + x[8] - x[5] >= 0
                6 - x[8] + x[5] >= 0
                7 + x[11] - x[8] >= 0
                6 - x[11] + x[8] >= 0
                7 + x[14] - x[11] >= 0
                6 - x[14] + x[11] >= 0
                x[0] + x[1] + x[2] - 60 >= 0
                x[3] + x[4] + x[5] - 50 >= 0
                x[6] + x[7] + x[8] - 70 >= 0
                x[9] + x[10] + x[11] - 85 >= 0
                x[12] + x[13] + x[14] - 100 >= 0
            The exact global minimum is approx. known:
                y ~= 664.820
                x[0] ~= 8
                x[1] ~= 49
                x[2] ~= 3
                x[3] ~= 1
                x[4] ~= 56
                x[5] ~= 0
                x[6] ~= 1
                x[7] ~= 63
                x[8] ~= 6
                x[9] ~= 3
                x[10] ~= 70
                x[11] ~= 12
                x[12] ~= 5
                x[13] ~= 77
                x[14] ~= 18
            Hyperparameters: 
                * The dimension d should be 15
                * The mode size n may be any (default is 64)
                * The default limits for function inputs are [-10, 10].
        """)

        self.set_grid(
            [8, 43, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
            [21, 57, 16, 90, 120, 60, 90, 120, 60, 90, 120, 60, 90, 120, 60]
        )
        self.set_constr(penalty=1.E+3, eps=1.E-2, with_amplitude=True)

    @property
    def args_constr(self):
        return {'d': 15}

    @property
    def identity(self):
        return ['n']

    @property
    def is_func(self):
        return True

    @property
    def with_constr(self):
        return True

    def _constr_batch(self, X):
        c_1 = -1 * (7 + X[:, 3] - X[:, 0])
        c_2 = -1 * (6 - X[:, 3] + X[:, 0])
        c_3 = -1 * (7 + X[:, 6] - X[:, 3])
        c_4 = -1 * (6 - X[:, 6] + X[:, 3])
        c_5 = -1 * (7 + X[:, 9] - X[:, 6])
        c_6 = -1 * (6 - X[:, 9] + X[:, 6])
        c_7 = -1 * (7 + X[:, 12] - X[:, 9])
        c_8 = -1 * (6 - X[:, 12] + X[:, 9])
        c_9 = -1 * (7 + X[:, 4] - X[:, 1])
        c_10 = -1 * (7 - X[:, 4] + X[:, 1])
        c_11 = -1 * (7 + X[:, 7] - X[:, 4])
        c_12 = -1 * (7 - X[:, 7] + X[:, 4])
        c_13 = -1 * (7 + X[:, 10] - X[:, 7])
        c_14 = -1 * (7 - X[:, 10] + X[:, 7])
        c_15 = -1 * (7 + X[:, 13] - X[:, 10])
        c_16 = -1 * (7 - X[:, 13] + X[:, 10])
        c_17 = -1 * (7 + X[:, 5] - X[:, 2])
        c_18 = -1 * (6 - X[:, 5] + X[:, 2])
        c_19 = -1 * (7 + X[:, 8] - X[:, 5])
        c_20 = -1 * (6 - X[:, 8] + X[:, 5])
        c_21 = -1 * (7 + X[:, 11] - X[:, 8])
        c_22 = -1 * (6 - X[:, 11] + X[:, 8])
        c_23 = -1 * (7 + X[:, 14] - X[:, 11])
        c_24 = -1 * (6 - X[:, 14] + X[:, 11])
        c_25 = -1 * (X[:, 0] + X[:, 1] + X[:, 2] - 60)
        c_26 = -1 * (X[:, 3] + X[:, 4] + X[:, 5] - 50)
        c_27 = -1 * (X[:, 6] + X[:, 7] + X[:, 8] - 70)
        c_28 = -1 * (X[:, 9] + X[:, 10] + X[:, 11] - 85)
        c_29 = -1 * (X[:, 12] + X[:, 13] + X[:, 14] - 100)
        return np.array([c_1, c_2, c_3, c_4, c_5, c_6, c_7, c_8, c_9, c_10, 
                         c_11, c_12, c_13, c_14, c_15, c_16, c_17, c_18, c_19, c_20, 
                         c_21, c_22, c_23, c_24, c_25, c_26, c_27, c_28, c_29])

    def constr_batch(self, X):
        c = self._constr_batch(X)
        c = sum(~(c < self.constr_eps) * np.abs(c))
        return c

    def target_batch(self, X):
        return 2.3 * X[:, 0] + 0.0001 * X[:, 0] ** 2 + \
               2.3 * X[:, 3] + 0.0001 * X[:, 3] ** 2 + \
               2.3 * X[:, 6] + 0.0001 * X[:, 6] ** 2 + \
               2.3 * X[:, 9] + 0.0001 * X[:, 9] ** 2 + \
               2.3 * X[:, 12] + 0.0001 * X[:, 12] ** 2 + \
               1.7 * X[:, 1] + 0.0001 * X[:, 1] ** 2 + \
               1.7 * X[:, 4] + 0.0001 * X[:, 4] ** 2 + \
               1.7 * X[:, 7] + 0.0001 * X[:, 7] ** 2 + \
               1.7 * X[:, 10] + 0.0001 * X[:, 10] ** 2 + \
               1.7 * X[:, 13] + 0.0001 * X[:, 13] ** 2 + \
               2.2 * X[:, 2] + 0.00015 * X[:, 2] ** 2 + \
               2.2 * X[:, 5] + 0.00015 * X[:, 5] ** 2 + \
               2.2 * X[:, 8] + 0.00015 * X[:, 8] ** 2 + \
               2.2 * X[:, 11] + 0.00015 * X[:, 11] ** 2 + \
               2.2 * X[:, 14] + 0.00015 * X[:, 14] ** 2