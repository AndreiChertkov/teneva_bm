import numpy as np
from teneva_bm import Bm


class BmHsFunc085(Bm):
    def __init__(self, d=5, n=64, seed=42, name=None):
        super().__init__(d, n, seed, name)
        self.set_desc("""
            The function 085 from the Hock & Schittkowski collection.
            Continuous optimal control (OC) problem with constraints:
            .-------------------------------------.
            | F(x | p, t) -> min s.t. C(x) = True |
            .-------------------------------------.
            p - parameters
                a = [17.505, 11.275, 214.228, 7.458, 0.961, 1.612, 0.146, 107.99, 922.693, 
                     926.832, 18.766, 1072.163, 8961.448, 0.063, 71084.33, 2802713]
                b = [1053.6667, 35.03, 665.585, 584.463, 265.916, 7.046, 0.222, 273.366, 1286.105, 
                     1444.046, 537.141, 3247.039, 26844.086, 0.386, 140000, 12146108]
            x - continuous control
                x[0] | >= 704.4148 | <= 906.3855
                x[1] | >= 68.6     | <= 288.88
                x[2] | >= 0        | <= 134.75
                x[3] | >= 193      | <= 287.0966
                x[4] | >= 25       | <= 84.1988
            t - intermediates
                y[0] = x[1] + x[2] + 41.6
                c[0] = .024 * x[3] - 4.62
                y[1] = 12.5 / c[0] + 12
                c[1] = .0003535 * x[0] ** 2 + .5311 * x[0] + .08705 * y[1] * x[0]
                c[2] = .052 * x[0] + 78 + .002377 * y[1] * x[0]
                y[2] = c[1] / c[2]
                y[3] = 19 * y[2]
                c[3] = .04782 * (x[0] - y[2]) + .1956 * (x[0] - y[2]) ** 2 / x[1] + .6376 * y[3] + 1.594 * y[2]
                c[4] = 100 * x[1]
                c[5] = x[0] - y[2] - y[3]
                c[6] = .95 - c[3] / c[4]
                y[4] = c[5] * c[6]
                y[5] = x[0] - y[4] - y[3] - y[2]
                c[7] = (y[4] + y[3]) * .995
                y[6] = c[7] / y[0]
                y[7] = c[7] / 3798
                c[8] = y[6] - .0663 * y[6] / y[7] - .3153
                y[8] = 96.82 / c[8] + .321 * y[0]
                c[9] = 123 / 7523
                y[9] = 1.29 * y[4] + 1.258 * y[3] + 2.29 * y[2] + 1.71 * y[5]
                y[10] = 1.71 * x[0] - .452 * y[3] + .58 * y[2]
                c[10] = (1.75 * y[1]) * (.995 * x[0])
                c[11] = .995 * y[9] + 1998
                y[11] = c[9] * x[0] + c[10] / c[11]
                y[12] = c[11] - 1.75 * y[1]
                y[13] = 3623 + 64.4 * x[1] + 58.4 * x[2] + 146312 / (y[8] + x[4])
                c[12] = .995 * y[9] + 60.8 * x[1] + 48 * x[3] - .1121 * y[13] - 5095
                y[14] = y[12] / c[12]
                y[15] = 148000 - 331000 * y[14] + 40 * y[12] - 61 * y[14] * y[12]
                c[13] = 2324 * y[9] - 28740000 * y[1]
                y[16] = 14130000 - 1328 * y[9] - 531 * y[10] + c[13] / c[11]
                c[14] = y[12] / y[14] - y[12] / .52
                c[15] = 1.104 - .72 * y[14]
                c[16] = y[8] + x[4]
            F - objective function
                (-5.843e-7) * y[16] + 1.17e-4 * y[13] + 2.358e-5 * y[12] + \
                1.502e-6 * y[15] + .0321 * y[11] + .004324 * y[4] + \
                1.0e-4 * c[14] / c[15] + 37.48 * y[1] / c[11] + .1365
            C - constraint function
                1.5 * x[1] - x[2] >= 0
                y[0] - 213.1 >= 0
                405.23 - y[0] >= 0
                y[1:] - a >= 0
                b - y[1:] >= 0
                y[3] - (28 / 72) * y[4] >= 0
                21 - 3496 * y[1] / c[11] >= 0
                62212 / c[16] - 110.6 - y[0] >= 0
            The exact global minimum is approx. known:
                y ~= -1.905
                x[0] ~= 705.175
                x[1] ~= 68.600
                x[2] ~= 102.900
                x[3] ~= 282.325
                x[4] ~= 37.584
            Hyperparameters: 
                * The dimension d should be 5
                * The mode size n may be any (default is 64)
                * The default limits for function inputs are [-10, 10].
        """)

        self.set_grid([704.4148, 68.6, 0, 193, 25], [906.3855, 288.88, 134.75, 287.0966, 84.1988])
        self.set_constr(penalty=1.E+3, eps=1.E-2, with_amplitude=True)
        self.set_parameters()

    @property
    def args_constr(self):
        return {'d': 5}

    @property
    def identity(self):
        return ['n']

    @property
    def is_func(self):
        return True

    @property
    def with_constr(self):
        return True

    def set_parameters(self):
        self.parameters = {
            'a': np.array([17.505, 11.275, 214.228, 7.458, 0.961, 1.612, 0.146, 107.99, 
                           922.693, 926.832, 18.766, 1072.163, 8961.448, 0.063, 71084.33, 2802713]),
            'b': np.array([1053.6667, 35.03, 665.585, 584.463, 265.916, 7.046, 0.222, 273.366, 
                  1286.105, 1444.046, 537.141, 3247.039, 26844.086, 0.386, 140000, 12146108])
        }

    def intermediates(self, X):
        y = c = np.zeros((17, X.shape[0]), dtype=X.dtype)
        y[0] = X[:, 1] + X[:, 2] + 41.6
        c[0] = .024 * X[:, 3] - 4.62
        y[1] = 12.5 / c[0] + 12
        c[1] = .0003535 * X[:, 0] ** 2 + .5311 * X[:, 0] + .08705 * y[1] * X[:, 0]
        c[2] = .052 * X[:, 0] + 78 + .002377 * y[1] * X[:, 0]
        y[2] = c[1] / c[2]
        y[3] = 19 * y[2]
        c[3] = .04782 * (X[:, 0] - y[2]) + .1956 * (X[:, 0] - y[2]) ** 2 / X[:, 1] + .6376 * y[3] + 1.594 * y[2]
        c[4] = 100 * X[:, 1]
        c[5] = X[:, 0] - y[2] - y[3]
        c[6] = .95 - c[3] / c[4]
        y[4] = c[5] * c[6]
        y[5] = X[:, 0] - y[4] - y[3] - y[2]
        c[7] = (y[4] + y[3]) * .995
        y[6] = c[7] / y[0]
        y[7] = c[7] / 3798
        c[8] = y[6] - .0663 * y[6] / y[7] - .3153
        y[8] = 96.82 / c[8] + .321 * y[0]
        c[9] = 123 / 7523
        y[9] = 1.29 * y[4] + 1.258 * y[3] + 2.29 * y[2] + 1.71 * y[5]
        y[10] = 1.71 * X[:, 0] - .452 * y[3] + .58 * y[2]
        c[10] = (1.75 * y[1]) * (.995 * X[:, 0])
        c[11] = .995 * y[9] + 1998
        y[11] = c[9] * X[:, 0] + c[10] / c[11]
        y[12] = c[11] - 1.75 * y[1]
        y[13] = 3623 + 64.4 * X[:, 1] + 58.4 * X[:, 2] + 146312 / (y[8] + X[:, 4])
        c[12] = .995 * y[9] + 60.8 * X[:, 1] + 48 * X[:, 3] - .1121 * y[13] - 5095
        y[14] = y[12] / c[12]
        y[15] = 148000 - 331000 * y[14] + 40 * y[12] - 61 * y[14] * y[12]
        c[13] = 2324 * y[9] - 28740000 * y[1]
        y[16] = 14130000 - 1328 * y[9] - 531 * y[10] + c[13] / c[11]
        c[14] = y[12] / y[14] - y[12] / .52
        c[15] = 1.104 - .72 * y[14]
        c[16] = y[8] + X[:, 4]
        return y, c

    def _constr_batch(self, X):
        y, c = self.intermediates(X)
        c_1 = np.array([
            -1 * (1.5 * X[:, 1] - X[:, 2]),
            -1 * (y[0] - 213.1),
            -1 * (405.23 - y[0]),
            -1 * (y[3] - (28 / 72) * y[4]),
            -1 * (21 - 3496 * y[1] / c[11]),
            -1 * (62212 / c[16] - 110.6 - y[0])
        ])
        c_2 = -1 * (y[1:] - self.parameters['a'][:, None])
        c_3 = -1 * (self.parameters['b'][:, None] - y[1:])
        c = np.vstack([c_1, c_2, c_3])
        return c

    def constr_batch(self, X):
        c = self._constr_batch(X)
        c = sum(~(c < self.constr_eps) * np.abs(c))
        return c

    def target_batch(self, X):
        y, c = self.intermediates(X)
        return (-5.843e-7) * y[16] + 1.17e-4 * y[13] + 2.358e-5 * y[12] + \
               1.502e-6 * y[15] + .0321 * y[11] + .004324 * y[4] + \
               1.0e-4 * c[14] / c[15] + 37.48 * y[1] / c[11] + .1365