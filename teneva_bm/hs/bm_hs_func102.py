import numpy as np
from teneva_bm import Bm


class BmHsFunc102(Bm):
    def __init__(self, d=7, n=64, seed=42, name=None):
        super().__init__(d, n, seed, name)
        self.set_desc("""
            The function 102 from the Hock & Schittkowski collection.
            Continuous optimal control (OC) problem with constraints:
            .-------------------------------------.
            | F(x | p, t) -> min s.t. C(x) = True |
            .-------------------------------------.
            p - parameters
                a = 1/8
            x - continuous control
                x[0] | >= 1/10 | <= 10
                x[1] | >= 1/10 | <= 10
                x[2] | >= 1/10 | <= 10
                x[3] | >= 1/10 | <= 10
                x[4] | >= 1/10 | <= 10
                x[5] | >= 1/10 | <= 10
                x[6] | >= 1/100 | <= 10
            t - intermediates
                t = 10 * x[0] * x[1] ** (-1) * x[3] ** 2 * x[5] ** (-3) * x[6] ** a + \
                     15 * x[0] ** (-1) * x[1] ** (-2) * x[2] * x[3] * x[4] ** (-1) * x[6] ** (-1 / 2) + \
                     20 * x[0] ** (-2) * x[1] * x[3] ** (-1) * x[4] ** (-2) * x[5] + \
                     25 * x[0] ** 2 * x[1] ** 2 * x[2] ** (-1) * x[4] ** (1 / 2) * x[5] ** (-2) * x[6]
            F - objective function
                t
            C - constraint function
                1 - (1 / 2) * x[0] ** (1 / 2) * x[2] ** (-1) * x[5] ** (-2) * x[6] - \
                (7 / 10) * x[0] ** 3 * x[1] * x[2] ** (-2) * x[5] * x[6] ** (1 / 2) - \
                (2 / 10) * x[1] ** (-1) * x[2] * x[3] ** (-1 / 2) * x[5] ** (2 / 3) * x[6] ** (1 / 4) >= 0
                ------------------------------------------------------------------------------------------
                1 - (13 / 10) * x[0] ** (-1 / 2) * x[1] * x[2] ** (-1) * x[4] ** (-1) * x[5] - \
                (8 / 10) * x[2] * x[3] ** (-1) * x[4] ** (-1) * x[5] ** 2 - \
                (31 / 10) * x[0] ** (-1) * x[1] ** (1 / 2) * x[3] ** (-2) * x[4] ** (-1) * x[5] ** (1 / 3) >= 0
                ------------------------------------------------------------------------------------------
                1 - 2 * x[0] * x[2] ** (-3 / 2) * x[4] * x[5] ** (-1) * x[6] ** (1 / 3) - \
                (1 / 10) * x[1] * x[2] ** (-1 / 2) * x[4] * x[5] ** (-1) * x[6] ** (-1 / 2) - \
                x[0] ** (-1) * x[1] * x[2] ** (1 / 2) * x[4] - \
                (65 / 100) * x[1] ** (-2) * x[2] * x[4] * x[5] ** (-1) * x[6] >= 0
                ------------------------------------------------------------------------------------------
                1 - (2 / 10) * x[0] ** (-2) * x[1] * x[3] ** (-1) * x[4] ** (1 / 2) * x[6] ** (1 / 3) - \
                (3 / 10) * x[0] ** (1 / 2) * x[1] ** 2 * x[2] * x[3] ** (1 / 3) * x[6] ** (1 / 4) * x[4] ** (-2 / 3) - \
                (4 / 10) * x[0] ** (-3) * x[1] ** (-2) * x[2] * x[4] * x[6] ** (3 / 4) - \
                (1 / 2) * x[2] ** (-2) * x[3] * x[6] ** (1 / 2) >= 0
                ------------------------------------------------------------------------------------------
                t - 100 >= 0
                3000 - t >= 0
            The exact global minimum is approx. known:
                y ~= 911.880
                x[0] ~= 3.896
                x[1] ~= 0.809
                x[2] ~= 2.664
                x[3] ~= 4.301
                x[4] ~= 0.854
                x[5] ~= 1.095
                x[6] ~= 0.027
            Hyperparameters: 
                * The dimension d should be 7
                * The mode size n may be any (default is 64)
                * The default limits for function inputs are [-10, 10].
        """)

        self.set_grid([1/10, 1/10, 1/10, 1/10, 1/10, 1/10, 1/100], [10, 10, 10, 10, 10, 10, 10])
        self.set_constr(penalty=1.E+3, eps=1.E-2, with_amplitude=True)
        self.set_parameters()

    @property
    def args_constr(self):
        return {'d': 7}

    @property
    def identity(self):
        return ['n']

    @property
    def is_func(self):
        return True

    @property
    def with_constr(self):
        return True

    def set_parameters(self):
        self.parameters = {'a': 1/8}

    def intermediates(self, X):
        t = 10 * X[:, 0] * X[:, 1] ** (-1) * X[:, 3] ** 2 * X[:, 5] ** (-3) * X[:, 6] ** self.parameters['a'] + 15 * X[:, 0] ** (-1) * X[:, 1] ** (-2) * X[:, 2] * X[:, 3] * X[:, 4] ** (-1) * X[:, 6] ** (-1 / 2) + 20 * X[:, 0] ** (-2) * X[:, 1] * X[:, 3] ** (-1) * X[:, 4] ** (-2) * X[:, 5] + 25 * X[:, 0] ** 2 * X[:, 1] ** 2 * X[:, 2] ** (-1) * X[:, 4] ** (1 / 2) * X[:, 5] ** (-2) * X[:, 6]
        return t 
    
    def _constr_batch(self, X):
        t = self.intermediates(X)
        c_1 = -1 * (
            1 - (1 / 2) * X[:, 0] ** (1 / 2) * X[:, 2] ** (-1) * X[:, 5] ** (-2) * X[:, 6] - \
            (7 / 10) * X[:, 0] ** 3 * X[:, 1] * X[:, 2] ** (-2) * X[:, 5] * X[:, 6] ** (1 / 2) - \
            (2 / 10) * X[:, 1] ** (-1) * X[:, 2] * X[:, 3] ** (-1 / 2) * X[:, 5] ** (2 / 3) * X[:, 6] ** (1 / 4)
        )
        c_2 = -1 * (
            1 - (13 / 10) * X[:, 0] ** (-1 / 2) * X[:, 1] * X[:, 2] ** (-1) * X[:, 4] ** (-1) * X[:, 5] - \
            (8 / 10) * X[:, 2] * X[:, 3] ** (-1) * X[:, 4] ** (-1) * X[:, 5] ** 2 - \
            (31 / 10) * X[:, 0] ** (-1) * X[:, 1] ** (1 / 2) * X[:, 3] ** (-2) * X[:, 4] ** (-1) * X[:, 5] ** (1 / 3)
        )
        c_3 = -1 * (
            1 - 2 * X[:, 0] * X[:, 2] ** (-3 / 2) * X[:, 4] * X[:, 5] ** (-1) * X[:, 6] ** (1 / 3) - \
            (1 / 10) * X[:, 1] * X[:, 2] ** (-1 / 2) * X[:, 4] * X[:, 5] ** (-1) * X[:, 6] ** (-1 / 2) - \
            X[:, 0] ** (-1) * X[:, 1] * X[:, 2] ** (1 / 2) * X[:, 4] - \
            (65 / 100) * X[:, 1] ** (-2) * X[:, 2] * X[:, 4] * X[:, 5] ** (-1) * X[:, 6]
        )
        c_4 = -1 * (
            1 - (2 / 10) * X[:, 0] ** (-2) * X[:, 1] * X[:, 3] ** (-1) * X[:, 4] ** (1 / 2) * X[:, 6] ** (1 / 3) - 
            (3 / 10) * X[:, 0] ** (1 / 2) * X[:, 1] ** 2 * X[:, 2] * X[:, 3] ** (1 / 3) * X[:, 6] ** (1 / 4) * \
            X[:, 4] ** (-2 / 3) - (4 / 10) * X[:, 0] ** (-3) * X[:, 1] ** (-2) * X[:, 2] * X[:, 4] * \
            X[:, 6] ** (3 / 4) - (1 / 2) * X[:, 2] ** (-2) * X[:, 3] * X[:, 6] ** (1 / 2)
        )
        c_5 = -1 * (t - 100)
        c_6 = -1 * (3000 - t)
        return np.array([c_1, c_2, c_3, c_4, c_5, c_6])

    def constr_batch(self, X):
        c = self._constr_batch(X)
        c = sum(~(c < self.constr_eps) * np.abs(c))
        return c

    def target_batch(self, X):
        t = self.intermediates(X)
        return t